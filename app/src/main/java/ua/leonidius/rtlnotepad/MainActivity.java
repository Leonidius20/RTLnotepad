package ua.leonidius.rtlnotepad;

import android.app.ActionBar;
import android.app.Activity;
import android.app.FragmentTransaction;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import ua.leonidius.rtlnotepad.dialogs.ExitDialog;
import ua.leonidius.rtlnotepad.dialogs.LastFilesDialog;
import ua.leonidius.rtlnotepad.dialogs.OpenDialog;
import ua.leonidius.rtlnotepad.utils.LastFilesMaster;

import java.io.File;
import java.util.LinkedHashSet;

public class MainActivity extends Activity
{
	private boolean noEditorFragmentAdded = false;
	private NoEditorFragment noEditorFragment;
	public SharedPreferences pref;
	
	final int SIZE_SMALL = 14, SIZE_MEDIUM = 18, SIZE_LARGE = 22;
	final String PREF_TEXT_SIZE = "textSize", PREF_THEME = "theme", PREF_THEME_LIGHT = "light", PREF_THEME_DARK = "dark";
	
	public static MainActivity activity;
	
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(null); // I'll manage to restore data on my own, thanks
		// TODO: figure out a better way to restore data, cause passing null results im dialogFragments not being restored
		activity = this;
		pref = getPreferences(MODE_PRIVATE);

		// Applying dark theme if chosen
		if (pref.getString(PREF_THEME, PREF_THEME_LIGHT).equals(PREF_THEME_DARK)) {
			setTheme(R.style.Leonidius_Dark);
		}
		
		setContentView(new LinearLayout(this));
		
		// Setting up tab navigation
		ActionBar actionBar = getActionBar();
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
		actionBar.setDisplayShowTitleEnabled(false);
		
		// Restoring tabs
		if (savedInstanceState != null) {
			restoreTabs(savedInstanceState);
		}
		
		// Opening a file from intent
		String path;
		try {
			path = getIntent().getData().getSchemeSpecificPart();
			if (path!=null) addTab(new File(path));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		addNoEditorFragmentIfNeeded();
		
		LastFilesMaster.initSlots(this);
	}

	/**
	 * Used for restoring tabs after activity was recreated (e.g. after a device has been rotated)
	 * @param savedState Bundle which was generated by OnSaveInstanceState()
	 */
	private void restoreTabs(Bundle savedState) {
		for (TabData tabData : (LinkedHashSet<TabData>)savedState.getSerializable("tabs")) {
			final ActionBar.Tab tab = getActionBar().newTab();
			tab.setText(tabData.name);

			EditorFragment fragment = new EditorFragment(tabData.text);
			fragment.file = tabData.file;
			fragment.mTag = tabData.tag;
			fragment.currentEncoding = tabData.encoding;
			fragment.hasUnsavedChanges = tabData.hasUnsavedChanges;
			tab.setTag(fragment);

			tab.setTabListener(new EditorTabListener());
			getActionBar().addTab(tab);
			if (tabData.isSelected) getActionBar().selectTab(tab);
		}
	}

	/**
	 * Opens a file in a new tab.
	 * @param file File to open
	 */
	private void addTab(File file) {
		// Detaching noEditorFragment
		removeNoEditorFragmentIfNeeded();
		
		// If the file is already opened, switching to the file's tab
		// TODO: INSTAED OF SWITCHING, PROMPT USER TO CHOOSE IF HE WANTS TO ADD A ANOTHER TAB WITH THAT FILE
		ActionBar.Tab fileTab = getFileTab(file);
		if (fileTab != null) {
			getActionBar().selectTab(fileTab);
			return;
		}
		
		// Creating a new tab
		ActionBar actionBar = getActionBar();
		ActionBar.Tab tab = actionBar.newTab();
		tab.setText(file.getName());

		EditorFragment fragment = new EditorFragment(this, file);
		tab.setTag(fragment); // Adding fragment as a tag

		tab.setTabListener(new EditorTabListener());
		actionBar.addTab(tab);
		
		// Selecting the tab
		actionBar.selectTab(tab);
		
		LastFilesMaster.add(file);
	}

	/**
	 * Adds a tab with a blank editor for a new file
	 */
	private void addTab() {
		// Detaching noEditorFragment
		removeNoEditorFragmentIfNeeded();
		
		ActionBar actionBar = getActionBar();
		ActionBar.Tab tab = actionBar.newTab();
		tab.setText(R.string.new_document);

		EditorFragment fragment = new EditorFragment(this);
		tab.setTag(fragment); // Adding fragment as a tag

		tab.setTabListener(new EditorTabListener());
		actionBar.addTab(tab);
		
		// Selecting the tab
		actionBar.selectTab(tab);
	}

	/**
	 * Creates an OnClickListener for close buttons on tabs,
	 * which allows to handle clicks and perform necessary actions
	 * to close a tab.
	 * @param tab Tab in which the button is located
	 * @param fragment Fragment which is attached to the tab
	 * @return Created OnClickListener
	 */
	private View.OnClickListener getCloseButtonListener(final ActionBar.Tab tab, final EditorFragment fragment) {
		return (View v) -> {
			// TODO: Show a floating menu
			if (tab == getActionBar().getSelectedTab()) {
				Toast.makeText(this, "CLICK HANDLED", Toast.LENGTH_SHORT).show();
			}
				/*if (fragment.hasUnsavedChanges) {
					CloseTabDialog ctd = new CloseTabDialog(activity);
					ctd.setCallback(new CloseTabDialog.Callback() {
						@Override
						public void callback(byte response) {
							if (response == DONT_SAVE) closeTab(tab);
							else if (response == SAVE) {
								if (fragment.file == null) {
									SaveDialog saveDialog = new SaveDialog(activity, fragment);
									saveDialog.setCallback(new SaveDialog.Callback() {
										@Override
										public void callback(File file)
										{
											LastFilesMaster.add(file);
											closeTab(tab);
										}
									});
									saveDialog.show(activity.getFragmentManager(), "saveDialog");
								} else {
									fragment.saveChanges();
									// TODO: handle possible errors while saving
									closeTab(tab);
								}
							}
						}
					});
					ctd.show(activity.getFragmentManager(), "closeTabDialog");
				} else closeTab(tab);*/
		};
	}

	/**
	 * Closes a tab, but doesn't show any warnings if there are unsaved changes in the tab.
	 * Is executed as a final stage of the tab closing process, after all warnings.
	 * @param tab Tab to close
	 */
	public void closeTab(ActionBar.Tab tab) {
		getActionBar().removeTab(tab);
		addNoEditorFragmentIfNeeded();
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu)
	{
		getMenuInflater().inflate(R.menu.options_new, menu);
		switch (pref.getString(PREF_THEME, PREF_THEME_LIGHT)) {
			case PREF_THEME_LIGHT:
				menu.findItem(R.id.options_theme_light).setChecked(true);
				break;
			case PREF_THEME_DARK:
				menu.findItem(R.id.options_theme_dark).setChecked(true);
				break;
		}
		switch (pref.getInt(PREF_TEXT_SIZE, SIZE_MEDIUM)) {
			case SIZE_SMALL:
				menu.findItem(R.id.options_textSize_small).setChecked(true);
				break;
			case SIZE_MEDIUM:
				menu.findItem(R.id.options_textSize_medium).setChecked(true);
				break;
			case SIZE_LARGE:
				menu.findItem(R.id.options_textSize_large).setChecked(true);
				break;
		}
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item)
	{
		switch (item.getItemId()) {
			case R.id.options_open:
				OpenDialog openDialog = new OpenDialog(this, this::addTab);
				openDialog.show(getFragmentManager(), "openDialog");
				return true;
			case R.id.options_new:
				addTab();
				return true;
			case R.id.options_theme_light:
				setThemeNow(PREF_THEME_LIGHT, item);
				return true;
			case R.id.options_theme_dark:
				setThemeNow(PREF_THEME_DARK, item);
				return true;
			case R.id.options_last_files:
				LastFilesDialog lfd = new LastFilesDialog(this, path -> addTab(new File(path)));
				lfd.show(getFragmentManager(), "lastFilesDialog");
				return true;
			case R.id.options_textSize_small:
				setTextSize(SIZE_SMALL);
				item.setChecked(true);
				return true;
			case R.id.options_textSize_medium:
				setTextSize(SIZE_MEDIUM);
				item.setChecked(true);
				return true;
			case R.id.options_textSize_large:
				setTextSize(SIZE_LARGE);
				item.setChecked(true);
				return true;
			case R.id.options_test:
				Intent i = new Intent();
				i.setClass(this, TestingActivity.class);
				startActivity(i);
				return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onBackPressed()
	{
		for (int i = 0; i < getActionBar().getTabCount(); i++) {
			ActionBar.Tab tab = getActionBar().getTabAt(i);
			EditorFragment tabFragment = (EditorFragment)tab.getTag();
			if (tabFragment.hasUnsavedChanges) {
				new ExitDialog().show(getFragmentManager(), "exitDialog");
				return;
			}
		}
		super.onBackPressed();
	}

	/**
	 * Finds a tab in which the specified file is opened.
	 * @param file File which is opened in the tab we are looking for
	 * @return ActionBar.Tab in which the specified file is opened, if such a tab exists, null otherwise
	 */
	private ActionBar.Tab getFileTab(File file) {
		// Iterating over tabs
		for (int i = 0; i < getActionBar().getTabCount(); i++) {
			ActionBar.Tab tab = getActionBar().getTabAt(i);
			EditorFragment tabFragment = (EditorFragment)tab.getTag();
			if (tabFragment.file != null && tabFragment.file.equals(file)) {
				return tab;
			}
		}
		return null;
	}

	/**
	 * Attaches a NoEditorFragment (placeholder) if all the tabs are closed.
	 */
	private void addNoEditorFragmentIfNeeded() {
		if (getActionBar().getTabCount() == 0) {
			FragmentTransaction sft = getFragmentManager().beginTransaction();
			if (!noEditorFragmentAdded) {
				noEditorFragment = new NoEditorFragment();
				sft.add(android.R.id.content, noEditorFragment, "noEditor");
				noEditorFragmentAdded = true;
			}
			sft.attach(noEditorFragment);
			sft.commitAllowingStateLoss();
		}
	}

	/**
	 * Removes a NoEditorFragment (placeholder) if a tab is being opened.
	 */
	private void removeNoEditorFragmentIfNeeded() {
		if (getActionBar().getTabCount() == 0 && noEditorFragmentAdded) {
			FragmentTransaction sft = getFragmentManager().beginTransaction();
      		sft.detach(noEditorFragment);
        	sft.commit();
		}
	}

	/**
	 * Executed upon a click on a menu item that corresponds to one of the available themes. If the item was checked
	 * with the click, saves a new theme setting and applies it instantly. Does nothing otherwise.
	 * @param theme A string that says which theme to apply. Must be one of the constants defined in MainActivity
	 * @param item An item of the menu which corresponds to a theme.
	 */
	private void setThemeNow (String theme, MenuItem item) {
		if (!item.isChecked()) {
			item.setChecked(true);
			SharedPreferences.Editor prefEdit = pref.edit();
			prefEdit.putString(PREF_THEME, theme);
			prefEdit.apply();
			recreate();
		}
	}

	@Override
	protected void onSaveInstanceState(Bundle outState)
	{
		super.onSaveInstanceState(outState);
		
		// Packing all data from tabs into TabData objects
		LinkedHashSet<TabData> tabs = new LinkedHashSet<TabData>();
		for (int i = 0; i < getActionBar().getTabCount(); i++) {
			ActionBar.Tab tab = getActionBar().getTabAt(i);
			TabData tabData = new TabData();
			//tabData.name = tab.getText().toString();
			tabData.name = ((TextView)tab.getCustomView()).getText().toString();
			tabData.file = ((EditorFragment)tab.getTag()).file;
			tabData.text = ((EditorFragment)tab.getTag()).getEditor().getText().toString();
			tabData.encoding = ((EditorFragment)tab.getTag()).currentEncoding;
			tabData.hasUnsavedChanges = ((EditorFragment)tab.getTag()).hasUnsavedChanges;
			tabData.isSelected = (getActionBar().getSelectedTab() == tab);
			tabData.tag = ((EditorFragment)tab.getTag()).mTag;
			tabs.add(tabData);
		}
		outState.putSerializable("tabs", tabs);
		
		/*if (getActionBar().getTabCount() > 0) {
			outState.putInt("currentFragmentID", ((Fragment)getActionBar().getSelectedTab().getTag()).getId());
		} else {
			outState.putInt("currentFragmentID", noEditorFragment.getId());
		}*/
		
		LastFilesMaster.saveSlots(this); // Maybe I should've moved it to onDestroy()?
	}

	/**
	 * @return An instance of MainActivity
	 */
	public static MainActivity getInstance() {
		return activity;
	}

	/**
	 * Sets a specified text size for all opened editors and saves the new settings to preferences.
	 * @param size The text size to apply
	 */
	private void setTextSize(int size) {
		for (int i = 0; i < getActionBar().getTabCount(); i++) {
			ActionBar.Tab tab = getActionBar().getTabAt(i);
			EditorFragment fragment = (EditorFragment)tab.getTag();
			fragment.getEditor().setTextSize(size);
		}
		SharedPreferences.Editor prefEditor = pref.edit();
		prefEditor.putInt(PREF_TEXT_SIZE, size);
		prefEditor.apply();
		// TODO: Consider recreating the activity at that point to avoid iterating through tabs
	}

	// on save object that isn't view...


	@Override
	public Object onRetainNonConfigurationInstance() {
		return super.onRetainNonConfigurationInstance();
	}
}
